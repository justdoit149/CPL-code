指针：
1.变量有它自己的类型、值和地址（%p）
2.变量在使用时可以用作左值或者右值（作为左值时，指代的是变量的空间/地址；作为右值时，指代的是这个空间里的数值）
3.指针是一个变量，这个变量的值是另外一个变量的地址。

如int *型，表示这个变量是一个指针，它指向一个int类型的变量
（注int* p和int *p均可，空格数不要求，）
1、3可知，指针变量也有着自己的地址，可以用&得到
用&这个运算符（取地址），表示一个变量的地址
用*这个运算符（间接寻址），用在指针变量p上面（*p），表示p指向的变量
（如int sum = 0; int *p = &sum; 则 *p == sum，两者等价 如*p = 100就相当于把sum变量修改为了100；
（ *&sum = sum; &*p = p ）

指针和数组：
1.在表达式中，数组名实际上就是数组第一个元素的地址。（也就是数组名可以“当做指针来用”）
2.但是数组名严格来说不是变量。

数组作为函数的形参时，写 int *arr 和 int arr[] 和 int arr[10]是完全等价的, 均是数组第一个元素的指针
（所以之前函数形参包括数组的话，中括号里往往不包含大小（因为写了也没用），而是再来一个形参n来表示大小。）
在函数体里，如果一个数组是形参的数组的话，那么 arr[3] <=> *(arr + 3)(对指针做加减运算)
（同理，上式 <=> *(3 + arr) <=> 3[arr] ,但是不要这样写）
不允许对数组名来赋值、……，可以 int *p = arr; 通过改变p来实现目的。




malloc函数（<stdlib.h>），申请一块空间，用于开可变长数组。
如 int *numbers = (int *)malloc(len * sizeof(*numbers))  （相当于开了一个numbers[len]数组）
（但是，malloc开的空间是在堆空间上的，而main函数里开的数组、变量都是在栈空间上的。
  main函数执行完后，数据会释放掉；但是堆空间上的不能释放。所以结束之后堆空间这个数组数据还在，有内存泄漏的风险
  所以经常需要手动释放 ： free(numbers); 表示把它释放掉。释放后相当于这个数组不存在了，这之后不能再读写它
  free释放的只能是malloc开的空间，不能释放栈空间！（未定义行为）
  不允许多次释放！（未定义行为）





NULL 表示空指针
const int *p = &sum; 表示指针p为const变量，也就是不能通过const来修改sum，
但是可以修改指针指向的变量，比如让它指向 n。
但是也可以通过别的方法来修改sum, 比如直接 sum = 1 或 int *q = &sum; *q = 1
(但是最好不要用一个指针q指向p来修改q进而实现修改p ……)
可以不同的限定方法来限定哪个能改哪个不能改（看教材）